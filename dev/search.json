[{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://larmarange.github.io/guideR/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://larmarange.github.io/guideR/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Larmarange. Author, maintainer.","code":""},{"path":"https://larmarange.github.io/guideR/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Larmarange J (2025). guideR: Miscellaneous Statistical Functions Used 'guide-R'. R package version 0.1.0.9000, https://github.com/larmarange/guideR, https://larmarange.github.io/guideR/.","code":"@Manual{,   title = {guideR: Miscellaneous Statistical Functions Used in 'guide-R'},   author = {Joseph Larmarange},   year = {2025},   note = {R package version 0.1.0.9000, https://github.com/larmarange/guideR},   url = {https://larmarange.github.io/guideR/}, }"},{"path":"https://larmarange.github.io/guideR/dev/index.html","id":"guider","dir":"","previous_headings":"","what":"Miscellaneous Statistical Functions Used in guide-R","title":"Miscellaneous Statistical Functions Used in guide-R","text":"guideR package companion manual guide-R : Guide pour l’analyse de données d’enquêtes avec R available https://larmarange.github.io/guide-R/. guideR implements miscellaneous functions introduced guide-R facilitate statistical analysis manipulation survey data.","code":""},{"path":"https://larmarange.github.io/guideR/dev/index.html","id":"installation--documentation","dir":"","previous_headings":"","what":"Installation & Documentation","title":"Miscellaneous Statistical Functions Used in guide-R","text":"install stable version: Documentation stable version: https://larmarange.github.io/guideR/ install development version: Documentation development version: https://larmarange.github.io/guideR/dev/","code":"install.packages(\"guideR\") # install.packages(\"pak\") pak::pak(\"larmarange/guideR\")"},{"path":"https://larmarange.github.io/guideR/dev/reference/guideR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"guideR: Miscellaneous Statistical Functions Used in 'guide-R' — guideR-package","title":"guideR: Miscellaneous Statistical Functions Used in 'guide-R' — guideR-package","text":"Companion package manual 'guide-R : Guide pour l’analyse de données d’enquêtes avec R' available https://larmarange.github.io/guide-R/. 'guideR' implements miscellaneous functions introduced 'guide-R' facilitate statistical analysis manipulation survey data.","code":""},{"path":[]},{"path":"https://larmarange.github.io/guideR/dev/reference/guideR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"guideR: Miscellaneous Statistical Functions Used in 'guide-R' — guideR-package","text":"Maintainer: Joseph Larmarange joseph@larmarange.net (ORCID)","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/install_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Install / Update project dependencies — install_dependencies","title":"Install / Update project dependencies — install_dependencies","text":"function uses renv::dependencies() identify R package dependencies project calls pak::pkg_install() install / update packages.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/install_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install / Update project dependencies — install_dependencies","text":"","code":"install_dependencies(ask = TRUE)"},{"path":"https://larmarange.github.io/guideR/dev/reference/install_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install / Update project dependencies — install_dependencies","text":"ask Whether ask confirmation installing different version package already installed. Installations add new packages never require confirmation.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/install_dependencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install / Update project dependencies — install_dependencies","text":"(Invisibly) data frame information installed package(s).","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/install_dependencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install / Update project dependencies — install_dependencies","text":"","code":"if (FALSE) { # \\dontrun{ install_dependencies() } # }"},{"path":"https://larmarange.github.io/guideR/dev/reference/is_different.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison tests considering NA as values to be compared — is_different","title":"Comparison tests considering NA as values to be compared — is_different","text":"is_different() is_equal() performs comparison tests, considering NA values legitimate values (see examples).","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/is_different.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison tests considering NA as values to be compared — is_different","text":"","code":"is_different(x, y)  is_equal(x, y)  cumdifferent(x)  num_cycle(x)"},{"path":"https://larmarange.github.io/guideR/dev/reference/is_different.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison tests considering NA as values to be compared — is_different","text":"x, y Vectors compared.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/is_different.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparison tests considering NA as values to be compared — is_different","text":"vector length x.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/is_different.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison tests considering NA as values to be compared — is_different","text":"cum_different() allows identify groups continuous rows value. num_cycle() used identify sub-groups respect certain condition (see examples). is_equal(x, y) equivalent (x == y & !.na(x) & !.na(y)) | (.na(x) & .na(y)), is_different(x, y) equivalent (x != y & !.na(x) & !.na(y)) | xor(.na(x), .na(y)).","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/is_different.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison tests considering NA as values to be compared — is_different","text":"","code":"v <- c(\"a\", \"b\", NA) is_different(v, \"a\") #> [1] FALSE  TRUE  TRUE is_different(v, NA) #> [1]  TRUE  TRUE FALSE is_equal(v, \"a\") #> [1]  TRUE FALSE FALSE is_equal(v, NA) #> [1] FALSE FALSE  TRUE d <- dplyr::tibble(group = c(\"a\", \"a\", \"b\", \"b\", \"a\", \"b\", \"c\", \"a\")) d |>   dplyr::mutate(     subgroup = cumdifferent(group),     sub_a = num_cycle(group == \"a\")   ) #> # A tibble: 8 × 3 #>   group subgroup sub_a #>   <chr>    <int> <int> #> 1 a            1     1 #> 2 a            1     1 #> 3 b            2    NA #> 4 b            2    NA #> 5 a            3     2 #> 6 b            4    NA #> 7 c            5    NA #> 8 a            6     3"},{"path":"https://larmarange.github.io/guideR/dev/reference/leading_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading zeros — leading_zeros","title":"Add leading zeros — leading_zeros","text":"Add leading zeros","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/leading_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading zeros — leading_zeros","text":"","code":"leading_zeros(x, left_digits = NULL, digits = 0, prefix = \"\", suffix = \"\", ...)"},{"path":"https://larmarange.github.io/guideR/dev/reference/leading_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading zeros — leading_zeros","text":"x numeric vector left_digits number digits decimal point, automatically computed provided digits number digits decimal point prefix, suffix Symbols display value ... additional parameters passed base::formatC(), big.mark decimal.mark","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/leading_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading zeros — leading_zeros","text":"character vector length x.","code":""},{"path":[]},{"path":"https://larmarange.github.io/guideR/dev/reference/leading_zeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading zeros — leading_zeros","text":"","code":"v <- c(2, 103.24, 1042.147, 12.4566, NA) leading_zeros(v) #> [1] \"0002\" \"0103\" \"1042\" \"0012\" \"  NA\" leading_zeros(v, digits = 1) #> [1] \"0002.0\" \"0103.2\" \"1042.1\" \"0012.5\" \"    NA\" leading_zeros(v, left_digits = 6, big.mark = \" \") #> [1] \"000 002\" \"000 103\" \"001 042\" \"000 012\" \"     NA\" leading_zeros(c(0, 6, 12, 18), prefix = \"M\") #> [1] \"M00\" \"M06\" \"M12\" \"M18\""},{"path":"https://larmarange.github.io/guideR/dev/reference/long_to_periods.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a data frame from long format to period format — long_to_periods","title":"Transform a data frame from long format to period format — long_to_periods","text":"Transform data frame long format period format","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/long_to_periods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a data frame from long format to period format — long_to_periods","text":"","code":"long_to_periods(data, id, start, stop = NULL, by = NULL)"},{"path":"https://larmarange.github.io/guideR/dev/reference/long_to_periods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a data frame from long format to period format — long_to_periods","text":"data data frame, data frame extension (e.g. tibble). id <tidy-select> Column containing individual ids start <tidy-select> Time variable indicating beginning row stop <tidy-select> Optional time variable indicating end row. provided, derived dataset, considering row ends beginning next one. <tidy-select> Co-variables consider (optional)","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/long_to_periods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a data frame from long format to period format — long_to_periods","text":"tibble.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/long_to_periods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a data frame from long format to period format — long_to_periods","text":"","code":"d <- dplyr::tibble(   patient = c(1, 2, 3, 3, 4, 4, 4),   begin = c(0, 0, 0, 1, 0, 36, 39),   end = c(50, 6, 1, 16, 36, 39, 45),   covar = c(\"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \"yes\") ) d #> # A tibble: 7 × 4 #>   patient begin   end covar #>     <dbl> <dbl> <dbl> <chr> #> 1       1     0    50 no    #> 2       2     0     6 no    #> 3       3     0     1 no    #> 4       3     1    16 yes   #> 5       4     0    36 no    #> 6       4    36    39 yes   #> 7       4    39    45 yes    d |> long_to_periods(id = patient, start = begin, stop = end) #> # A tibble: 4 × 3 #> # Groups:   patient [4] #>   patient begin   end #>     <dbl> <dbl> <dbl> #> 1       1     0    50 #> 2       2     0     6 #> 3       3     0    16 #> 4       4     0    45 d |> long_to_periods(id = patient, start = begin, stop = end, by = covar) #> # A tibble: 6 × 4 #> # Groups:   patient [4] #>   patient begin   end covar #>     <dbl> <dbl> <dbl> <chr> #> 1       1     0    50 no    #> 2       2     0     6 no    #> 3       3     0     1 no    #> 4       3     1    16 yes   #> 5       4     0    36 no    #> 6       4    36    45 yes    # If stop not provided, it is deduced. # However, it considers that observation ends at the last start time. d |> long_to_periods(id = patient, start = begin) #> # A tibble: 2 × 3 #> # Groups:   patient [2] #>   patient begin .stop #>     <dbl> <dbl> <dbl> #> 1       3     0     1 #> 2       4     0    39"},{"path":"https://larmarange.github.io/guideR/dev/reference/observed_vs_theoretical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"Plot observed vs predicted distribution fitted model","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/observed_vs_theoretical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"","code":"observed_vs_theoretical(model)"},{"path":"https://larmarange.github.io/guideR/dev/reference/observed_vs_theoretical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"model statistical model.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/observed_vs_theoretical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"ggplot2 plot.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/observed_vs_theoretical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"tested stats::lm() stats::glm() models. may work types models, without warranty.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/observed_vs_theoretical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"","code":"# a linear model mod <- lm(Sepal.Length ~ Sepal.Width + Species, data = iris) mod |> observed_vs_theoretical()   # a logistic regression mod <- glm(   as.factor(Survived) ~ Class + Sex,   data = titanic,   family = binomial() ) mod |> observed_vs_theoretical()"},{"path":"https://larmarange.github.io/guideR/dev/reference/plot_inertia_from_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"Plot inertia, absolute loss relative loss classification tree","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/plot_inertia_from_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"","code":"plot_inertia_from_tree(tree, k_max = 15)  get_inertia_from_tree(tree, k_max = 15)"},{"path":"https://larmarange.github.io/guideR/dev/reference/plot_inertia_from_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"tree dendrogram, .e. stats::hclust object, FactoMineR::HCPC object object can converted stats::hclust object stats::.hclust(). k_max Maximum number clusters return / plot.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/plot_inertia_from_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"ggplot2 plot tibble.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/plot_inertia_from_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"","code":"hc <- hclust(dist(USArrests)) get_inertia_from_tree(hc) #> # A tibble: 15 × 4 #>        k inertia absolute_loss relative_loss #>    <int>   <dbl>         <dbl>         <dbl> #>  1     1   294.         NA          NA       #>  2     2   169.       -125.         -0.426   #>  3     3   103.        -65.7        -0.390   #>  4     4    87.3       -15.5        -0.151   #>  5     5    68.8       -18.6        -0.213   #>  6     6    65.0        -3.77       -0.0548  #>  7     7    57.3        -7.72       -0.119   #>  8     8    53.6        -3.68       -0.0642  #>  9     9    48.7        -4.87       -0.0908  #> 10    10    41.5        -7.24       -0.149   #> 11    11    38.5        -2.96       -0.0713  #> 12    12    36.8        -1.68       -0.0436  #> 13    13    36.7        -0.113      -0.00307 #> 14    14    32.7        -4.02       -0.109   #> 15    15    31.6        -1.10       -0.0336  plot_inertia_from_tree(hc)"},{"path":"https://larmarange.github.io/guideR/dev/reference/proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute proportions — proportion","title":"Compute proportions — proportion","text":"proportion() lets quickly count observations (like dplyr::count()) compute relative proportions. Proportions computed separately group (see examples).","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute proportions — proportion","text":"","code":"proportion(data, ..., .by = NULL)  # S3 method for class 'data.frame' proportion(   data,   ...,   .by = NULL,   .na.rm = FALSE,   .weight = NULL,   .scale = 100,   .sort = FALSE,   .drop = FALSE,   .conf.int = FALSE,   .conf.level = 0.95,   .options = list(correct = TRUE) )  # S3 method for class 'survey.design' proportion(   data,   ...,   .by = NULL,   .na.rm = FALSE,   .scale = 100,   .sort = FALSE,   .conf.int = FALSE,   .conf.level = 0.95,   .options = NULL )"},{"path":"https://larmarange.github.io/guideR/dev/reference/proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute proportions — proportion","text":"data data frame, data frame extension (e.g. tibble), survey design object. ... <data-masking> Variable(s) computing proportions. .<tidy-select> Optional additional variables group (addition eventually previously declared using dplyr::group_by()). .na.rm NA values removed (variables declared ...)? .weight <data-masking> Frequency weights. Can NULL variable. .scale scaling factor applied proportion. Use 1 keeping proportions unchanged. .sort TRUE, show highest proportions top. .drop TRUE, remove empty groups output. .conf.int TRUE, estimate confidence intervals. .conf.level Confidence level returned confidence intervals. .options Additional arguments passed stats::prop.test() srvyr::survey_prop().","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute proportions — proportion","text":"tibble. tibble one row per group.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute proportions — proportion","text":"","code":"# univariable table titanic |> proportion(Class) #> # A tibble: 4 × 4 #>   Class     n     N  prop #>   <chr> <int> <int> <dbl> #> 1 1st     325  2201  14.8 #> 2 2nd     285  2201  12.9 #> 3 3rd     706  2201  32.1 #> 4 Crew    885  2201  40.2 titanic |> proportion(Class, .sort = TRUE) #> # A tibble: 4 × 4 #>   Class     n     N  prop #>   <chr> <int> <int> <dbl> #> 1 Crew    885  2201  40.2 #> 2 3rd     706  2201  32.1 #> 3 1st     325  2201  14.8 #> 4 2nd     285  2201  12.9 titanic |> proportion(Class, .conf.int = TRUE) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <int> <int> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201  14.8     13.3      16.3 #> 2 2nd     285  2201  12.9     11.6      14.4 #> 3 3rd     706  2201  32.1     30.1      34.1 #> 4 Crew    885  2201  40.2     38.2      42.3 titanic |> proportion(Class, .conf.int = TRUE, .scale = 1) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <int> <int> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201 0.148    0.133     0.163 #> 2 2nd     285  2201 0.129    0.116     0.144 #> 3 3rd     706  2201 0.321    0.301     0.341 #> 4 Crew    885  2201 0.402    0.382     0.423  # bivariable table titanic |> proportion(Class, Survived) # proportions of the total #> # A tibble: 8 × 5 #>   Class Survived     n     N  prop #>   <chr> <chr>    <int> <int> <dbl> #> 1 1st   No         122  2201  5.54 #> 2 1st   Yes        203  2201  9.22 #> 3 2nd   No         167  2201  7.59 #> 4 2nd   Yes        118  2201  5.36 #> 5 3rd   No         528  2201 24.0  #> 6 3rd   Yes        178  2201  8.09 #> 7 Crew  No         673  2201 30.6  #> 8 Crew  Yes        212  2201  9.63 titanic |> proportion(Survived, .by = Class) # row proportions #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <int> <int> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0 titanic |> # equivalent syntax   dplyr::group_by(Class) |>   proportion(Survived) #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <int> <int> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0  # combining 3 variables or more titanic |> proportion(Class, Sex, Survived) #> # A tibble: 16 × 6 #>    Class Sex    Survived     n     N   prop #>    <chr> <chr>  <chr>    <int> <int>  <dbl> #>  1 1st   Female No           4  2201  0.182 #>  2 1st   Female Yes        141  2201  6.41  #>  3 1st   Male   No         118  2201  5.36  #>  4 1st   Male   Yes         62  2201  2.82  #>  5 2nd   Female No          13  2201  0.591 #>  6 2nd   Female Yes         93  2201  4.23  #>  7 2nd   Male   No         154  2201  7.00  #>  8 2nd   Male   Yes         25  2201  1.14  #>  9 3rd   Female No         106  2201  4.82  #> 10 3rd   Female Yes         90  2201  4.09  #> 11 3rd   Male   No         422  2201 19.2   #> 12 3rd   Male   Yes         88  2201  4.00  #> 13 Crew  Female No           3  2201  0.136 #> 14 Crew  Female Yes         20  2201  0.909 #> 15 Crew  Male   No         670  2201 30.4   #> 16 Crew  Male   Yes        192  2201  8.72  titanic |> proportion(Sex, Survived, .by = Class) #> # A tibble: 16 × 6 #> # Groups:   Class [4] #>    Class Sex    Survived     n     N   prop #>    <chr> <chr>  <chr>    <int> <int>  <dbl> #>  1 1st   Female No           4   325  1.23  #>  2 1st   Female Yes        141   325 43.4   #>  3 1st   Male   No         118   325 36.3   #>  4 1st   Male   Yes         62   325 19.1   #>  5 2nd   Female No          13   285  4.56  #>  6 2nd   Female Yes         93   285 32.6   #>  7 2nd   Male   No         154   285 54.0   #>  8 2nd   Male   Yes         25   285  8.77  #>  9 3rd   Female No         106   706 15.0   #> 10 3rd   Female Yes         90   706 12.7   #> 11 3rd   Male   No         422   706 59.8   #> 12 3rd   Male   Yes         88   706 12.5   #> 13 Crew  Female No           3   885  0.339 #> 14 Crew  Female Yes         20   885  2.26  #> 15 Crew  Male   No         670   885 75.7   #> 16 Crew  Male   Yes        192   885 21.7   titanic |> proportion(Survived, .by = c(Class, Sex)) #> # A tibble: 16 × 6 #> # Groups:   Class, Sex [8] #>    Class Sex    Survived     n     N  prop #>    <chr> <chr>  <chr>    <int> <int> <dbl> #>  1 1st   Female No           4   145  2.76 #>  2 1st   Female Yes        141   145 97.2  #>  3 1st   Male   No         118   180 65.6  #>  4 1st   Male   Yes         62   180 34.4  #>  5 2nd   Female No          13   106 12.3  #>  6 2nd   Female Yes         93   106 87.7  #>  7 2nd   Male   No         154   179 86.0  #>  8 2nd   Male   Yes         25   179 14.0  #>  9 3rd   Female No         106   196 54.1  #> 10 3rd   Female Yes         90   196 45.9  #> 11 3rd   Male   No         422   510 82.7  #> 12 3rd   Male   Yes         88   510 17.3  #> 13 Crew  Female No           3    23 13.0  #> 14 Crew  Female Yes         20    23 87.0  #> 15 Crew  Male   No         670   862 77.7  #> 16 Crew  Male   Yes        192   862 22.3   # missing values dna <- titanic dna$Survived[c(1:20, 500:530)] <- NA dna |> proportion(Survived) #> # A tibble: 3 × 4 #>   Survived     n     N  prop #>   <chr>    <int> <int> <dbl> #> 1 No        1439  2201 65.4  #> 2 Yes        711  2201 32.3  #> 3 NA          51  2201  2.32 dna |> proportion(Survived, .na.rm = TRUE) #> # A tibble: 2 × 4 #>   Survived     n     N  prop #>   <chr>    <int> <int> <dbl> #> 1 No        1439  2150  66.9 #> 2 Yes        711  2150  33.1  # \\donttest{ ## SURVEY DATA ------------------------------------------------------  ds <- srvyr::as_survey(titanic)  # univariable table ds |> proportion(Class) #> # A tibble: 4 × 4 #>   Class     n     N  prop #>   <chr> <dbl> <dbl> <dbl> #> 1 1st     325  2201  14.8 #> 2 2nd     285  2201  12.9 #> 3 3rd     706  2201  32.1 #> 4 Crew    885  2201  40.2 ds |> proportion(Class, .sort = TRUE) #> # A tibble: 4 × 4 #>   Class     n     N  prop #>   <chr> <dbl> <dbl> <dbl> #> 1 Crew    885  2201  40.2 #> 2 3rd     706  2201  32.1 #> 3 1st     325  2201  14.8 #> 4 2nd     285  2201  12.9 ds |> proportion(Class, .conf.int = TRUE) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <dbl> <dbl> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201  14.8     13.3      16.3 #> 2 2nd     285  2201  12.9     11.6      14.4 #> 3 3rd     706  2201  32.1     30.2      34.1 #> 4 Crew    885  2201  40.2     38.2      42.3 ds |> proportion(Class, .conf.int = TRUE, .scale = 1) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <dbl> <dbl> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201 0.148    0.133     0.163 #> 2 2nd     285  2201 0.129    0.116     0.144 #> 3 3rd     706  2201 0.321    0.302     0.341 #> 4 Crew    885  2201 0.402    0.382     0.423  # bivariable table ds |> proportion(Class, Survived) # proportions of the total #> # A tibble: 8 × 5 #>   Class Survived     n     N  prop #>   <chr> <chr>    <dbl> <dbl> <dbl> #> 1 1st   No         122  2201  5.54 #> 2 1st   Yes        203  2201  9.22 #> 3 2nd   No         167  2201  7.59 #> 4 2nd   Yes        118  2201  5.36 #> 5 3rd   No         528  2201 24.0  #> 6 3rd   Yes        178  2201  8.09 #> 7 Crew  No         673  2201 30.6  #> 8 Crew  Yes        212  2201  9.63 ds |> proportion(Survived, .by = Class) # row proportions #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <dbl> <dbl> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0 ds |> dplyr::group_by(Class) |> proportion(Survived) #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <dbl> <dbl> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0  # combining 3 variables or more ds |> proportion(Class, Sex, Survived) #> # A tibble: 16 × 6 #>    Class Sex    Survived     n     N   prop #>    <chr> <chr>  <chr>    <dbl> <dbl>  <dbl> #>  1 1st   Female No           4  2201  0.182 #>  2 1st   Female Yes        141  2201  6.41  #>  3 1st   Male   No         118  2201  5.36  #>  4 1st   Male   Yes         62  2201  2.82  #>  5 2nd   Female No          13  2201  0.591 #>  6 2nd   Female Yes         93  2201  4.23  #>  7 2nd   Male   No         154  2201  7.00  #>  8 2nd   Male   Yes         25  2201  1.14  #>  9 3rd   Female No         106  2201  4.82  #> 10 3rd   Female Yes         90  2201  4.09  #> 11 3rd   Male   No         422  2201 19.2   #> 12 3rd   Male   Yes         88  2201  4.00  #> 13 Crew  Female No           3  2201  0.136 #> 14 Crew  Female Yes         20  2201  0.909 #> 15 Crew  Male   No         670  2201 30.4   #> 16 Crew  Male   Yes        192  2201  8.72  ds |> proportion(Sex, Survived, .by = Class) #> # A tibble: 16 × 6 #> # Groups:   Class [4] #>    Class Sex    Survived     n     N   prop #>    <chr> <chr>  <chr>    <dbl> <dbl>  <dbl> #>  1 1st   Female No           4   325  1.23  #>  2 1st   Female Yes        141   325 43.4   #>  3 1st   Male   No         118   325 36.3   #>  4 1st   Male   Yes         62   325 19.1   #>  5 2nd   Female No          13   285  4.56  #>  6 2nd   Female Yes         93   285 32.6   #>  7 2nd   Male   No         154   285 54.0   #>  8 2nd   Male   Yes         25   285  8.77  #>  9 3rd   Female No         106   706 15.0   #> 10 3rd   Female Yes         90   706 12.7   #> 11 3rd   Male   No         422   706 59.8   #> 12 3rd   Male   Yes         88   706 12.5   #> 13 Crew  Female No           3   885  0.339 #> 14 Crew  Female Yes         20   885  2.26  #> 15 Crew  Male   No         670   885 75.7   #> 16 Crew  Male   Yes        192   885 21.7   ds |> proportion(Survived, .by = c(Class, Sex)) #> # A tibble: 16 × 6 #> # Groups:   Class, Sex [8] #>    Class Sex    Survived     n     N  prop #>    <chr> <chr>  <chr>    <dbl> <dbl> <dbl> #>  1 1st   Female No           4   145  2.76 #>  2 1st   Female Yes        141   145 97.2  #>  3 1st   Male   No         118   180 65.6  #>  4 1st   Male   Yes         62   180 34.4  #>  5 2nd   Female No          13   106 12.3  #>  6 2nd   Female Yes         93   106 87.7  #>  7 2nd   Male   No         154   179 86.0  #>  8 2nd   Male   Yes         25   179 14.0  #>  9 3rd   Female No         106   196 54.1  #> 10 3rd   Female Yes         90   196 45.9  #> 11 3rd   Male   No         422   510 82.7  #> 12 3rd   Male   Yes         88   510 17.3  #> 13 Crew  Female No           3    23 13.0  #> 14 Crew  Female Yes         20    23 87.0  #> 15 Crew  Male   No         670   862 77.7  #> 16 Crew  Male   Yes        192   862 22.3   # missing values dsna <- srvyr::as_survey(dna) dsna |> proportion(Survived) #> # A tibble: 3 × 4 #>   Survived     n     N  prop #>   <chr>    <dbl> <dbl> <dbl> #> 1 No        1439  2201 65.4  #> 2 Yes        711  2201 32.3  #> 3 NA          51  2201  2.32 dsna |> proportion(Survived, .na.rm = TRUE) #> # A tibble: 2 × 4 #>   Survived     n     N  prop #>   <chr>    <dbl> <dbl> <dbl> #> 1 No        1439  2150  66.9 #> 2 Yes        711  2150  33.1 # }"},{"path":"https://larmarange.github.io/guideR/dev/reference/round_preserve_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Round values while preserve their rounded sum in R — round_preserve_sum","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"Sometimes, sum rounded numbers (e.g., using base::round()) rounded sum.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/round_preserve_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"","code":"round_preserve_sum(x, digits = 0)"},{"path":"https://larmarange.github.io/guideR/dev/reference/round_preserve_sum.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"https://biostatmatt.com/archives/2902","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/round_preserve_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"x Numerical vector sum. digits Number decimals rounding.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/round_preserve_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"numerical vector length x.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/round_preserve_sum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"solution applies following algorithm Round specified number decimal places Order numbers remainder values Increment specified decimal place values k largest remainders, k number values must incremented preserve rounded sum","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/round_preserve_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"","code":"sum(c(0.333, 0.333, 0.334)) #> [1] 1 round(c(0.333, 0.333, 0.334), 2) #> [1] 0.33 0.33 0.33 sum(round(c(0.333, 0.333, 0.334), 2)) #> [1] 0.99 round_preserve_sum(c(0.333, 0.333, 0.334), 2) #> [1] 0.33 0.33 0.34 sum(round_preserve_sum(c(0.333, 0.333, 0.334), 2)) #> [1] 1"},{"path":"https://larmarange.github.io/guideR/dev/reference/step_with_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply step(), taking into account missing values — step_with_na","title":"Apply step(), taking into account missing values — step_with_na","text":"data contains missing values, concerned observations removed model. However, later stage, try apply descending stepwise approach reduce model minimization AIC, may encounter error number rows changed.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/step_with_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply step(), taking into account missing values — step_with_na","text":"","code":"step_with_na(model, ...)  # Default S3 method step_with_na(model, ..., full_data = eval(model$call$data))  # S3 method for class 'svyglm' step_with_na(model, ..., design)"},{"path":"https://larmarange.github.io/guideR/dev/reference/step_with_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply step(), taking into account missing values — step_with_na","text":"model model object. ... Additional parameters passed stats::step(). full_data Full data frame used model, including missing data. design Survey design previously passed survey::svyglm().","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/step_with_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply step(), taking into account missing values — step_with_na","text":"stepwise-selected model.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/step_with_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply step(), taking into account missing values — step_with_na","text":"step_with_na() applies following strategy: recomputes models using complete cases; applies stats::step(); recomputes reduced model using full original dataset. step_with_na() tested stats::lm(), stats::glm(), nnet::multinom() survey::svyglm(). may working types models, warranty. cases, may necessary provide full dataset initially used estimate model. step_with_na() may work inside functions. case, may try pass full_data function.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/step_with_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply step(), taking into account missing values — step_with_na","text":"","code":"set.seed(42) d <- titanic |>   dplyr::mutate(     Group = sample(       c(\"a\", \"b\", NA),       dplyr::n(),       replace = TRUE     )   ) mod <- glm(as.factor(Survived) ~ ., data = d, family = binomial()) # step(mod) should produce an error mod2 <- step_with_na(mod) #> Error in eval(model$call$data): object 'd' not found mod2 #> Error: object 'mod2' not found  # \\donttest{ ## WITH SURVEY ---------------------------------------  library(survey) #> Loading required package: grid #> Loading required package: Matrix #> Loading required package: survival #>  #> Attaching package: ‘survey’ #> The following object is masked from ‘package:graphics’: #>  #>     dotchart ds <- d |>   dplyr::mutate(Survived = as.factor(Survived)) |>   srvyr::as_survey() mods <- survey::svyglm(   Survived ~ Class + Group + Sex,   design = ds,   family = quasibinomial() ) mod2s <- step_with_na(mods, design = ds) #> Start:  AIC=1471.56 #> Survived ~ Class + Group + Sex #>  #>         Df Deviance    AIC #> - Group  1   1462.6 1469.9 #> <none>       1462.2 1471.6 #> - Class  3   1527.9 1530.3 #> - Sex    1   1712.6 1716.5 #>  #> Step:  AIC=1469.94 #> Survived ~ Class + Sex #>  #>         Df Deviance    AIC #> <none>       1462.6 1469.9 #> - Class  3   1528.4 1528.8 #> - Sex    1   1713.1 1714.8 mod2s #> Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>   - ids: `1`  #>  #> Call:  svyglm(formula = Survived ~ Class + Sex, design = design, family = quasibinomial()) #>  #> Coefficients: #> (Intercept)     Class2nd     Class3rd    ClassCrew      SexMale   #>      2.0682      -0.9526      -1.6582      -0.8808      -2.4213   #>  #> Degrees of Freedom: 2200 Total (i.e. Null);  2196 Residual #> Null Deviance:\t    2769  #> Residual Deviance: 2229 \tAIC: NA # }"},{"path":"https://larmarange.github.io/guideR/dev/reference/titanic.html","id":null,"dir":"Reference","previous_headings":"","what":"Titanic data set in long format — titanic","title":"Titanic data set in long format — titanic","text":"titanic dataset equivalent datasets::Titanic |> dplyr::as_tibble() |> tidyr::uncount(n).","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/titanic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Titanic data set in long format — titanic","text":"","code":"titanic"},{"path":"https://larmarange.github.io/guideR/dev/reference/titanic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Titanic data set in long format — titanic","text":"object class tbl_df (inherits tbl, data.frame) 2201 rows 4 columns.","code":""},{"path":[]},{"path":"https://larmarange.github.io/guideR/dev/reference/unrowwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove row-wise grouping — unrowwise","title":"Remove row-wise grouping — unrowwise","text":"Remove row-wise grouping created dplyr::rowwise() preserving grouping declared dplyr::group_by().","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/unrowwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove row-wise grouping — unrowwise","text":"","code":"unrowwise(data)"},{"path":"https://larmarange.github.io/guideR/dev/reference/unrowwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove row-wise grouping — unrowwise","text":"data data frame, data frame extension (e.g. tibble), lazy data frame.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/unrowwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove row-wise grouping — unrowwise","text":"tibble.","code":""},{"path":"https://larmarange.github.io/guideR/dev/reference/unrowwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove row-wise grouping — unrowwise","text":"","code":"titanic |> dplyr::rowwise() #> # A tibble: 2,201 × 4 #> # Rowwise:  #>    Class Sex   Age   Survived #>    <chr> <chr> <chr> <chr>    #>  1 3rd   Male  Child No       #>  2 3rd   Male  Child No       #>  3 3rd   Male  Child No       #>  4 3rd   Male  Child No       #>  5 3rd   Male  Child No       #>  6 3rd   Male  Child No       #>  7 3rd   Male  Child No       #>  8 3rd   Male  Child No       #>  9 3rd   Male  Child No       #> 10 3rd   Male  Child No       #> # ℹ 2,191 more rows titanic |> dplyr::rowwise() |> unrowwise() #> # A tibble: 2,201 × 4 #>    Class Sex   Age   Survived #>    <chr> <chr> <chr> <chr>    #>  1 3rd   Male  Child No       #>  2 3rd   Male  Child No       #>  3 3rd   Male  Child No       #>  4 3rd   Male  Child No       #>  5 3rd   Male  Child No       #>  6 3rd   Male  Child No       #>  7 3rd   Male  Child No       #>  8 3rd   Male  Child No       #>  9 3rd   Male  Child No       #> 10 3rd   Male  Child No       #> # ℹ 2,191 more rows  titanic |> dplyr::group_by(Sex, Class) |> dplyr::rowwise() #> # A tibble: 2,201 × 4 #> # Rowwise:  Sex, Class #>    Class Sex   Age   Survived #>    <chr> <chr> <chr> <chr>    #>  1 3rd   Male  Child No       #>  2 3rd   Male  Child No       #>  3 3rd   Male  Child No       #>  4 3rd   Male  Child No       #>  5 3rd   Male  Child No       #>  6 3rd   Male  Child No       #>  7 3rd   Male  Child No       #>  8 3rd   Male  Child No       #>  9 3rd   Male  Child No       #> 10 3rd   Male  Child No       #> # ℹ 2,191 more rows titanic |> dplyr::group_by(Sex, Class) |> dplyr::rowwise() |> unrowwise() #> # A tibble: 2,201 × 4 #> # Groups:   Sex, Class [8] #>    Class Sex   Age   Survived #>    <chr> <chr> <chr> <chr>    #>  1 3rd   Male  Child No       #>  2 3rd   Male  Child No       #>  3 3rd   Male  Child No       #>  4 3rd   Male  Child No       #>  5 3rd   Male  Child No       #>  6 3rd   Male  Child No       #>  7 3rd   Male  Child No       #>  8 3rd   Male  Child No       #>  9 3rd   Male  Child No       #> 10 3rd   Male  Child No       #> # ℹ 2,191 more rows"},{"path":[]},{"path":"https://larmarange.github.io/guideR/dev/news/index.html","id":"guider-010","dir":"Changelog","previous_headings":"","what":"guideR 0.1.0","title":"guideR 0.1.0","text":"Initial CRAN submission.","code":""}]
