[{"path":"https://larmarange.github.io/guideR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Larmarange. Author, maintainer.","code":""},{"path":"https://larmarange.github.io/guideR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Larmarange J (2025). guideR: Miscellaneous Statistical Functions Used 'guide-R'. R package version 0.0.1, https://github.com/larmarange/guideR, https://larmarange.github.io/guideR/.","code":"@Manual{,   title = {guideR: Miscellaneous Statistical Functions Used in 'guide-R'},   author = {Joseph Larmarange},   year = {2025},   note = {R package version 0.0.1, https://github.com/larmarange/guideR},   url = {https://larmarange.github.io/guideR/}, }"},{"path":"https://larmarange.github.io/guideR/index.html","id":"guider","dir":"","previous_headings":"","what":"Miscellaneous Statistical Functions Used in guide-R","title":"Miscellaneous Statistical Functions Used in guide-R","text":"guideR package companion manual guide-R : Guide pour l’analyse de données d’enquêtes avec R available https://larmarange.github.io/guide-R/. guideR implements miscellaneous functions introduced guide-R facilitate statistical analysis.","code":""},{"path":"https://larmarange.github.io/guideR/index.html","id":"installation--documentation","dir":"","previous_headings":"","what":"Installation & Documentation","title":"Miscellaneous Statistical Functions Used in guide-R","text":"install stable version: Documentation stable version: https://larmarange.github.io/guideR/ install development version: Documentation development version: https://larmarange.github.io/guideR/dev/","code":"install.packages(\"guideR\") # install.packages(\"pak\") pak::pak(\"larmarange/guideR\")"},{"path":"https://larmarange.github.io/guideR/index.html","id":"compute-proportions","dir":"","previous_headings":"","what":"Compute proportions","title":"Miscellaneous Statistical Functions Used in guide-R","text":"","code":"titanic <- Titanic |> dplyr::as_tibble() |> tidyr::uncount(n)  library(guideR)  titanic |> proportion(Class, .conf.int = TRUE) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <int> <int> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201  14.8     13.3      16.3 #> 2 2nd     285  2201  12.9     11.6      14.4 #> 3 3rd     706  2201  32.1     30.1      34.1 #> 4 Crew    885  2201  40.2     38.2      42.3  titanic |> proportion(Survived, .by = Class) #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <int> <int> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0"},{"path":"https://larmarange.github.io/guideR/reference/guideR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"guideR: Miscellaneous Statistical Functions Used in 'guide-R' — guideR-package","title":"guideR: Miscellaneous Statistical Functions Used in 'guide-R' — guideR-package","text":"Miscellaneous statistical functions introduced used manual \"guide-R : Guide pour l’analyse de données d’enquêtes avec R\" available https://larmarange.github.io/guide-R/.","code":""},{"path":[]},{"path":"https://larmarange.github.io/guideR/reference/guideR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"guideR: Miscellaneous Statistical Functions Used in 'guide-R' — guideR-package","text":"Maintainer: Joseph Larmarange joseph@larmarange.net (ORCID)","code":""},{"path":"https://larmarange.github.io/guideR/reference/install_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Install / Update R package dependencies in a project — install_dependencies","title":"Install / Update R package dependencies in a project — install_dependencies","text":"function uses renv::dependencies() identify R package dependencies project calls pak::pkg_install() install / update packages.","code":""},{"path":"https://larmarange.github.io/guideR/reference/install_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install / Update R package dependencies in a project — install_dependencies","text":"","code":"install_dependencies(ask = TRUE)"},{"path":"https://larmarange.github.io/guideR/reference/install_dependencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install / Update R package dependencies in a project — install_dependencies","text":"ask Whether ask confirmation installing different version package already installed. Installations add new packages never require confirmation.","code":""},{"path":"https://larmarange.github.io/guideR/reference/install_dependencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install / Update R package dependencies in a project — install_dependencies","text":"","code":"if (FALSE) { # \\dontrun{ install_dependencies() } # }"},{"path":"https://larmarange.github.io/guideR/reference/is_different.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison tests considering NA as values to be compared — is_different","title":"Comparison tests considering NA as values to be compared — is_different","text":"is_different() is_equal() performs comparison tests, considering NA values legitimate values (see examples).","code":""},{"path":"https://larmarange.github.io/guideR/reference/is_different.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison tests considering NA as values to be compared — is_different","text":"","code":"is_different(x, y)  is_equal(x, y)  cumdifferent(x)  num_cycle(x)"},{"path":"https://larmarange.github.io/guideR/reference/is_different.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison tests considering NA as values to be compared — is_different","text":"x, y Vectors compared.","code":""},{"path":"https://larmarange.github.io/guideR/reference/is_different.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison tests considering NA as values to be compared — is_different","text":"cum_different() allows identify groups continuous rows value. num_cycle() used identify sub-groups respect certain condition (see examples). is_equal(x, y) equivalent (x == y & !.na(x) & !.na(y)) | (.na(x) & .na(y)), is_different(x, y) equivalent (x != y & !.na(x) & !.na(y)) | xor(.na(x), .na(y)).","code":""},{"path":"https://larmarange.github.io/guideR/reference/is_different.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison tests considering NA as values to be compared — is_different","text":"","code":"v <- c(\"a\", \"b\", NA) is_different(v, \"a\") #> [1] FALSE  TRUE  TRUE is_different(v, NA) #> [1]  TRUE  TRUE FALSE is_equal(v, \"a\") #> [1]  TRUE FALSE FALSE is_equal(v, NA) #> [1] FALSE FALSE  TRUE d <- dplyr::tibble(group = c(\"a\", \"a\", \"b\", \"b\", \"a\", \"b\", \"c\", \"a\")) d |>   dplyr::mutate(     subgroup = cumdifferent(group),     sub_a = num_cycle(group == \"a\")   ) #> # A tibble: 8 × 3 #>   group subgroup sub_a #>   <chr>    <int> <int> #> 1 a            1     1 #> 2 a            1     1 #> 3 b            2    NA #> 4 b            2    NA #> 5 a            3     2 #> 6 b            4    NA #> 7 c            5    NA #> 8 a            6     3"},{"path":"https://larmarange.github.io/guideR/reference/leading_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading zeros — leading_zeros","title":"Add leading zeros — leading_zeros","text":"Add leading zeros","code":""},{"path":"https://larmarange.github.io/guideR/reference/leading_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading zeros — leading_zeros","text":"","code":"leading_zeros(x, left_digits = NULL, digits = 0, prefix = \"\", suffix = \"\", ...)"},{"path":"https://larmarange.github.io/guideR/reference/leading_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading zeros — leading_zeros","text":"x numeric vector left_digits number digits decimal point, automatically computed provided digits number digits decimal point prefix, suffix Symbols display value ... additional parameters passed base::formatC(), big.mark decimal.mark","code":""},{"path":[]},{"path":"https://larmarange.github.io/guideR/reference/leading_zeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading zeros — leading_zeros","text":"","code":"v <- c(2, 103.24, 1042.147, 12.4566, NA) leading_zeros(v) #> [1] \"0002\" \"0103\" \"1042\" \"0012\" \"  NA\" leading_zeros(v, digits = 1) #> [1] \"0002.0\" \"0103.2\" \"1042.1\" \"0012.5\" \"    NA\" leading_zeros(v, left_digits = 6, big.mark = \" \") #> [1] \"000 002\" \"000 103\" \"001 042\" \"000 012\" \"     NA\" leading_zeros(c(0, 6, 12, 18), prefix = \"M\") #> [1] \"M00\" \"M06\" \"M12\" \"M18\""},{"path":"https://larmarange.github.io/guideR/reference/long_to_periods.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a data frame from long format to period format — long_to_periods","title":"Transform a data frame from long format to period format — long_to_periods","text":"Transform data frame long format period format","code":""},{"path":"https://larmarange.github.io/guideR/reference/long_to_periods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a data frame from long format to period format — long_to_periods","text":"","code":"long_to_periods(data, id, start, stop = NULL, by = NULL)"},{"path":"https://larmarange.github.io/guideR/reference/long_to_periods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a data frame from long format to period format — long_to_periods","text":"data data.frame id <tidy-select> column containing individual ids start <tidy-select> time variable indicating beginning row stop <tidy-select> optional time variable indicating end row. provided, derived dataset, considering row ends beginning next one. <tidy-select> co-variables consider (optional)","code":""},{"path":"https://larmarange.github.io/guideR/reference/long_to_periods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a data frame from long format to period format — long_to_periods","text":"","code":"d <- dplyr::tibble(   patient = c(1, 2, 3, 3, 4, 4, 4),   begin = c(0, 0, 0, 1, 0, 36, 39),   end = c(50, 6, 1, 16, 36, 39, 45),   covar = c(\"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \"yes\") ) d #> # A tibble: 7 × 4 #>   patient begin   end covar #>     <dbl> <dbl> <dbl> <chr> #> 1       1     0    50 no    #> 2       2     0     6 no    #> 3       3     0     1 no    #> 4       3     1    16 yes   #> 5       4     0    36 no    #> 6       4    36    39 yes   #> 7       4    39    45 yes    d |> long_to_periods(id = patient, start = begin, stop = end) #> # A tibble: 4 × 3 #> # Groups:   patient [4] #>   patient begin   end #>     <dbl> <dbl> <dbl> #> 1       1     0    50 #> 2       2     0     6 #> 3       3     0    16 #> 4       4     0    45 d |> long_to_periods(id = patient, start = begin, stop = end, by = covar) #> # A tibble: 6 × 4 #> # Groups:   patient [4] #>   patient begin   end covar #>     <dbl> <dbl> <dbl> <chr> #> 1       1     0    50 no    #> 2       2     0     6 no    #> 3       3     0     1 no    #> 4       3     1    16 yes   #> 5       4     0    36 no    #> 6       4    36    45 yes    # If stop not provided, it is deduced. # However, it considers that observation ends at the last start time. d |> long_to_periods(id = patient, start = begin) #> # A tibble: 2 × 3 #> # Groups:   patient [2] #>   patient begin .stop #>     <dbl> <dbl> <dbl> #> 1       3     0     1 #> 2       4     0    39"},{"path":"https://larmarange.github.io/guideR/reference/observed_vs_theoretical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"Plot observed vs predicted distribution fitted model","code":""},{"path":"https://larmarange.github.io/guideR/reference/observed_vs_theoretical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"","code":"observed_vs_theoretical(model)"},{"path":"https://larmarange.github.io/guideR/reference/observed_vs_theoretical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"model statistical model.","code":""},{"path":"https://larmarange.github.io/guideR/reference/observed_vs_theoretical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"ggplot2 plot.","code":""},{"path":"https://larmarange.github.io/guideR/reference/observed_vs_theoretical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"tested stats::lm() stats::glm() models. may work types models, without warranty.","code":""},{"path":"https://larmarange.github.io/guideR/reference/observed_vs_theoretical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot observed vs predicted distribution of a fitted model — observed_vs_theoretical","text":"","code":"# a linear model mod <- lm(Sepal.Length ~ Sepal.Width + Species, data = iris) mod |> observed_vs_theoretical()   # a logistic regression mod <- glm(   as.factor(Survived) ~ Class + Sex,   data = titanic,   family = binomial() ) mod |> observed_vs_theoretical()"},{"path":"https://larmarange.github.io/guideR/reference/plot_inertia_from_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"Plot inertia, absolute loss relative loss classification tree","code":""},{"path":"https://larmarange.github.io/guideR/reference/plot_inertia_from_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"","code":"plot_inertia_from_tree(tree, k_max = 15)  get_inertia_from_tree(tree, k_max = 15)"},{"path":"https://larmarange.github.io/guideR/reference/plot_inertia_from_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"tree dendrogram, .e. stats::hclust object, FactoMineR::HCPC object object can converted stats::hclust object stats::.hclust(). k_max Maximum number clusters return / plot.","code":""},{"path":"https://larmarange.github.io/guideR/reference/plot_inertia_from_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"ggplot2 plot tibble.","code":""},{"path":"https://larmarange.github.io/guideR/reference/plot_inertia_from_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot inertia, absolute loss and relative loss from a classification tree — plot_inertia_from_tree","text":"","code":"hc <- hclust(dist(USArrests)) get_inertia_from_tree(hc) #> # A tibble: 15 × 4 #>        k inertia absolute_loss relative_loss #>    <int>   <dbl>         <dbl>         <dbl> #>  1     1   294.         NA          NA       #>  2     2   169.       -125.         -0.426   #>  3     3   103.        -65.7        -0.390   #>  4     4    87.3       -15.5        -0.151   #>  5     5    68.8       -18.6        -0.213   #>  6     6    65.0        -3.77       -0.0548  #>  7     7    57.3        -7.72       -0.119   #>  8     8    53.6        -3.68       -0.0642  #>  9     9    48.7        -4.87       -0.0908  #> 10    10    41.5        -7.24       -0.149   #> 11    11    38.5        -2.96       -0.0713  #> 12    12    36.8        -1.68       -0.0436  #> 13    13    36.7        -0.113      -0.00307 #> 14    14    32.7        -4.02       -0.109   #> 15    15    31.6        -1.10       -0.0336  plot_inertia_from_tree(hc)"},{"path":"https://larmarange.github.io/guideR/reference/proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute proportions — proportion","title":"Compute proportions — proportion","text":"proportion() lets quickly count observations (like dplyr::count()) compute relative proportions. Proportions computed separately group (see examples).","code":""},{"path":"https://larmarange.github.io/guideR/reference/proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute proportions — proportion","text":"","code":"proportion(data, ..., .by = NULL)  # S3 method for class 'data.frame' proportion(   data,   ...,   .by = NULL,   .na.rm = FALSE,   .weight = NULL,   .scale = 100,   .sort = FALSE,   .drop = FALSE,   .conf.int = FALSE,   .conf.level = 0.95,   .options = list(correct = TRUE) )  # S3 method for class 'survey.design' proportion(   data,   ...,   .by = NULL,   .na.rm = FALSE,   .scale = 100,   .sort = FALSE,   .conf.int = FALSE,   .conf.level = 0.95,   .options = NULL )"},{"path":"https://larmarange.github.io/guideR/reference/proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute proportions — proportion","text":"data data frame, data frame extension (e.g. tibble), survey design object. ... <data-masking> Variable(s) computing proportions. .<tidy-select> Optional additional variables group (addition eventually previously declared using dplyr::group_by()). .na.rm NA values removed (variables declared ...)? .weight <data-masking> Frequency weights. Can NULL variable. .scale scaling factor applied proportion. Use 1 keeping proportions unchanged. .sort TRUE, show highest proportions top. .drop TRUE, remove empty groups output. .conf.int TRUE, estimate confidence intervals. .conf.level Confidence level returned confidence intervals. .options Additional arguments passed stats::prop.test() srvyr::survey_prop().","code":""},{"path":"https://larmarange.github.io/guideR/reference/proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute proportions — proportion","text":"tibble one row per group.","code":""},{"path":"https://larmarange.github.io/guideR/reference/proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute proportions — proportion","text":"","code":"# univariable table titanic |> proportion(Class) #> # A tibble: 4 × 4 #>   Class     n     N  prop #>   <chr> <int> <int> <dbl> #> 1 1st     325  2201  14.8 #> 2 2nd     285  2201  12.9 #> 3 3rd     706  2201  32.1 #> 4 Crew    885  2201  40.2 titanic |> proportion(Class, .sort = TRUE) #> # A tibble: 4 × 4 #>   Class     n     N  prop #>   <chr> <int> <int> <dbl> #> 1 Crew    885  2201  40.2 #> 2 3rd     706  2201  32.1 #> 3 1st     325  2201  14.8 #> 4 2nd     285  2201  12.9 titanic |> proportion(Class, .conf.int = TRUE) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <int> <int> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201  14.8     13.3      16.3 #> 2 2nd     285  2201  12.9     11.6      14.4 #> 3 3rd     706  2201  32.1     30.1      34.1 #> 4 Crew    885  2201  40.2     38.2      42.3 titanic |> proportion(Class, .conf.int = TRUE, .scale = 1) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <int> <int> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201 0.148    0.133     0.163 #> 2 2nd     285  2201 0.129    0.116     0.144 #> 3 3rd     706  2201 0.321    0.301     0.341 #> 4 Crew    885  2201 0.402    0.382     0.423  # bivariable table titanic |> proportion(Class, Survived) # proportions of the total #> # A tibble: 8 × 5 #>   Class Survived     n     N  prop #>   <chr> <chr>    <int> <int> <dbl> #> 1 1st   No         122  2201  5.54 #> 2 1st   Yes        203  2201  9.22 #> 3 2nd   No         167  2201  7.59 #> 4 2nd   Yes        118  2201  5.36 #> 5 3rd   No         528  2201 24.0  #> 6 3rd   Yes        178  2201  8.09 #> 7 Crew  No         673  2201 30.6  #> 8 Crew  Yes        212  2201  9.63 titanic |> proportion(Survived, .by = Class) # row proportions #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <int> <int> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0 titanic |> # equivalent syntax   dplyr::group_by(Class) |>   proportion(Survived) #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <int> <int> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0  # combining 3 variables or more titanic |> proportion(Class, Sex, Survived) #> # A tibble: 16 × 6 #>    Class Sex    Survived     n     N   prop #>    <chr> <chr>  <chr>    <int> <int>  <dbl> #>  1 1st   Female No           4  2201  0.182 #>  2 1st   Female Yes        141  2201  6.41  #>  3 1st   Male   No         118  2201  5.36  #>  4 1st   Male   Yes         62  2201  2.82  #>  5 2nd   Female No          13  2201  0.591 #>  6 2nd   Female Yes         93  2201  4.23  #>  7 2nd   Male   No         154  2201  7.00  #>  8 2nd   Male   Yes         25  2201  1.14  #>  9 3rd   Female No         106  2201  4.82  #> 10 3rd   Female Yes         90  2201  4.09  #> 11 3rd   Male   No         422  2201 19.2   #> 12 3rd   Male   Yes         88  2201  4.00  #> 13 Crew  Female No           3  2201  0.136 #> 14 Crew  Female Yes         20  2201  0.909 #> 15 Crew  Male   No         670  2201 30.4   #> 16 Crew  Male   Yes        192  2201  8.72  titanic |> proportion(Sex, Survived, .by = Class) #> # A tibble: 16 × 6 #> # Groups:   Class [4] #>    Class Sex    Survived     n     N   prop #>    <chr> <chr>  <chr>    <int> <int>  <dbl> #>  1 1st   Female No           4   325  1.23  #>  2 1st   Female Yes        141   325 43.4   #>  3 1st   Male   No         118   325 36.3   #>  4 1st   Male   Yes         62   325 19.1   #>  5 2nd   Female No          13   285  4.56  #>  6 2nd   Female Yes         93   285 32.6   #>  7 2nd   Male   No         154   285 54.0   #>  8 2nd   Male   Yes         25   285  8.77  #>  9 3rd   Female No         106   706 15.0   #> 10 3rd   Female Yes         90   706 12.7   #> 11 3rd   Male   No         422   706 59.8   #> 12 3rd   Male   Yes         88   706 12.5   #> 13 Crew  Female No           3   885  0.339 #> 14 Crew  Female Yes         20   885  2.26  #> 15 Crew  Male   No         670   885 75.7   #> 16 Crew  Male   Yes        192   885 21.7   titanic |> proportion(Survived, .by = c(Class, Sex)) #> # A tibble: 16 × 6 #> # Groups:   Class, Sex [8] #>    Class Sex    Survived     n     N  prop #>    <chr> <chr>  <chr>    <int> <int> <dbl> #>  1 1st   Female No           4   145  2.76 #>  2 1st   Female Yes        141   145 97.2  #>  3 1st   Male   No         118   180 65.6  #>  4 1st   Male   Yes         62   180 34.4  #>  5 2nd   Female No          13   106 12.3  #>  6 2nd   Female Yes         93   106 87.7  #>  7 2nd   Male   No         154   179 86.0  #>  8 2nd   Male   Yes         25   179 14.0  #>  9 3rd   Female No         106   196 54.1  #> 10 3rd   Female Yes         90   196 45.9  #> 11 3rd   Male   No         422   510 82.7  #> 12 3rd   Male   Yes         88   510 17.3  #> 13 Crew  Female No           3    23 13.0  #> 14 Crew  Female Yes         20    23 87.0  #> 15 Crew  Male   No         670   862 77.7  #> 16 Crew  Male   Yes        192   862 22.3   # missing values dna <- titanic dna$Survived[c(1:20, 500:530)] <- NA dna |> proportion(Survived) #> # A tibble: 3 × 4 #>   Survived     n     N  prop #>   <chr>    <int> <int> <dbl> #> 1 No        1439  2201 65.4  #> 2 Yes        711  2201 32.3  #> 3 NA          51  2201  2.32 dna |> proportion(Survived, .na.rm = TRUE) #> # A tibble: 2 × 4 #>   Survived     n     N  prop #>   <chr>    <int> <int> <dbl> #> 1 No        1439  2150  66.9 #> 2 Yes        711  2150  33.1  ## SURVEY DATA ------------------------------------------------------  ds <- srvyr::as_survey(titanic)  # univariable table ds |> proportion(Class) #> # A tibble: 4 × 4 #>   Class     n     N  prop #>   <chr> <dbl> <dbl> <dbl> #> 1 1st     325  2201  14.8 #> 2 2nd     285  2201  12.9 #> 3 3rd     706  2201  32.1 #> 4 Crew    885  2201  40.2 ds |> proportion(Class, .sort = TRUE) #> # A tibble: 4 × 4 #>   Class     n     N  prop #>   <chr> <dbl> <dbl> <dbl> #> 1 Crew    885  2201  40.2 #> 2 3rd     706  2201  32.1 #> 3 1st     325  2201  14.8 #> 4 2nd     285  2201  12.9 ds |> proportion(Class, .conf.int = TRUE) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <dbl> <dbl> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201  14.8     13.3      16.3 #> 2 2nd     285  2201  12.9     11.6      14.4 #> 3 3rd     706  2201  32.1     30.2      34.1 #> 4 Crew    885  2201  40.2     38.2      42.3 ds |> proportion(Class, .conf.int = TRUE, .scale = 1) #> # A tibble: 4 × 6 #>   Class     n     N  prop prop_low prop_high #>   <chr> <dbl> <dbl> <dbl>    <dbl>     <dbl> #> 1 1st     325  2201 0.148    0.133     0.163 #> 2 2nd     285  2201 0.129    0.116     0.144 #> 3 3rd     706  2201 0.321    0.302     0.341 #> 4 Crew    885  2201 0.402    0.382     0.423  # bivariable table ds |> proportion(Class, Survived) # proportions of the total #> # A tibble: 8 × 5 #>   Class Survived     n     N  prop #>   <chr> <chr>    <dbl> <dbl> <dbl> #> 1 1st   No         122  2201  5.54 #> 2 1st   Yes        203  2201  9.22 #> 3 2nd   No         167  2201  7.59 #> 4 2nd   Yes        118  2201  5.36 #> 5 3rd   No         528  2201 24.0  #> 6 3rd   Yes        178  2201  8.09 #> 7 Crew  No         673  2201 30.6  #> 8 Crew  Yes        212  2201  9.63 ds |> proportion(Survived, .by = Class) # row proportions #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <dbl> <dbl> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0 ds |> dplyr::group_by(Class) |> proportion(Survived) #> # A tibble: 8 × 5 #> # Groups:   Class [4] #>   Class Survived     n     N  prop #>   <chr> <chr>    <dbl> <dbl> <dbl> #> 1 1st   No         122   325  37.5 #> 2 1st   Yes        203   325  62.5 #> 3 2nd   No         167   285  58.6 #> 4 2nd   Yes        118   285  41.4 #> 5 3rd   No         528   706  74.8 #> 6 3rd   Yes        178   706  25.2 #> 7 Crew  No         673   885  76.0 #> 8 Crew  Yes        212   885  24.0  # combining 3 variables or more ds |> proportion(Class, Sex, Survived) #> # A tibble: 16 × 6 #>    Class Sex    Survived     n     N   prop #>    <chr> <chr>  <chr>    <dbl> <dbl>  <dbl> #>  1 1st   Female No           4  2201  0.182 #>  2 1st   Female Yes        141  2201  6.41  #>  3 1st   Male   No         118  2201  5.36  #>  4 1st   Male   Yes         62  2201  2.82  #>  5 2nd   Female No          13  2201  0.591 #>  6 2nd   Female Yes         93  2201  4.23  #>  7 2nd   Male   No         154  2201  7.00  #>  8 2nd   Male   Yes         25  2201  1.14  #>  9 3rd   Female No         106  2201  4.82  #> 10 3rd   Female Yes         90  2201  4.09  #> 11 3rd   Male   No         422  2201 19.2   #> 12 3rd   Male   Yes         88  2201  4.00  #> 13 Crew  Female No           3  2201  0.136 #> 14 Crew  Female Yes         20  2201  0.909 #> 15 Crew  Male   No         670  2201 30.4   #> 16 Crew  Male   Yes        192  2201  8.72  ds |> proportion(Sex, Survived, .by = Class) #> # A tibble: 16 × 6 #> # Groups:   Class [4] #>    Class Sex    Survived     n     N   prop #>    <chr> <chr>  <chr>    <dbl> <dbl>  <dbl> #>  1 1st   Female No           4   325  1.23  #>  2 1st   Female Yes        141   325 43.4   #>  3 1st   Male   No         118   325 36.3   #>  4 1st   Male   Yes         62   325 19.1   #>  5 2nd   Female No          13   285  4.56  #>  6 2nd   Female Yes         93   285 32.6   #>  7 2nd   Male   No         154   285 54.0   #>  8 2nd   Male   Yes         25   285  8.77  #>  9 3rd   Female No         106   706 15.0   #> 10 3rd   Female Yes         90   706 12.7   #> 11 3rd   Male   No         422   706 59.8   #> 12 3rd   Male   Yes         88   706 12.5   #> 13 Crew  Female No           3   885  0.339 #> 14 Crew  Female Yes         20   885  2.26  #> 15 Crew  Male   No         670   885 75.7   #> 16 Crew  Male   Yes        192   885 21.7   ds |> proportion(Survived, .by = c(Class, Sex)) #> # A tibble: 16 × 6 #> # Groups:   Class, Sex [8] #>    Class Sex    Survived     n     N  prop #>    <chr> <chr>  <chr>    <dbl> <dbl> <dbl> #>  1 1st   Female No           4   145  2.76 #>  2 1st   Female Yes        141   145 97.2  #>  3 1st   Male   No         118   180 65.6  #>  4 1st   Male   Yes         62   180 34.4  #>  5 2nd   Female No          13   106 12.3  #>  6 2nd   Female Yes         93   106 87.7  #>  7 2nd   Male   No         154   179 86.0  #>  8 2nd   Male   Yes         25   179 14.0  #>  9 3rd   Female No         106   196 54.1  #> 10 3rd   Female Yes         90   196 45.9  #> 11 3rd   Male   No         422   510 82.7  #> 12 3rd   Male   Yes         88   510 17.3  #> 13 Crew  Female No           3    23 13.0  #> 14 Crew  Female Yes         20    23 87.0  #> 15 Crew  Male   No         670   862 77.7  #> 16 Crew  Male   Yes        192   862 22.3   # missing values dsna <- srvyr::as_survey(dna) dsna |> proportion(Survived) #> # A tibble: 3 × 4 #>   Survived     n     N  prop #>   <chr>    <dbl> <dbl> <dbl> #> 1 No        1439  2201 65.4  #> 2 Yes        711  2201 32.3  #> 3 NA          51  2201  2.32 dsna |> proportion(Survived, .na.rm = TRUE) #> # A tibble: 2 × 4 #>   Survived     n     N  prop #>   <chr>    <dbl> <dbl> <dbl> #> 1 No        1439  2150  66.9 #> 2 Yes        711  2150  33.1"},{"path":"https://larmarange.github.io/guideR/reference/round_preserve_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Round values while preserve their rounded sum in R — round_preserve_sum","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"Sometimes, sum rounded numbers (e.g., using base::round()) rounded sum.","code":""},{"path":"https://larmarange.github.io/guideR/reference/round_preserve_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"","code":"round_preserve_sum(x, digits = 0)"},{"path":"https://larmarange.github.io/guideR/reference/round_preserve_sum.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"https://biostatmatt.com/archives/2902","code":""},{"path":"https://larmarange.github.io/guideR/reference/round_preserve_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"x vector sum digits number decimals rounding","code":""},{"path":"https://larmarange.github.io/guideR/reference/round_preserve_sum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"solution applies following algorithm Round specified number decimal places Order numbers remainder values Increment specified decimal place values k largest remainders, k number values must incremented preserve rounded sum","code":""},{"path":"https://larmarange.github.io/guideR/reference/round_preserve_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round values while preserve their rounded sum in R — round_preserve_sum","text":"","code":"sum(c(0.333, 0.333, 0.334)) #> [1] 1 round(c(0.333, 0.333, 0.334), 2) #> [1] 0.33 0.33 0.33 sum(round(c(0.333, 0.333, 0.334), 2)) #> [1] 0.99 round_preserve_sum(c(0.333, 0.333, 0.334), 2) #> [1] 0.33 0.33 0.34 sum(round_preserve_sum(c(0.333, 0.333, 0.334), 2)) #> [1] 1"},{"path":"https://larmarange.github.io/guideR/reference/step_with_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply step(), taking into account missing values — step_with_na","title":"Apply step(), taking into account missing values — step_with_na","text":"data contains missing values, concerned observations removed model. However, later stage, try apply descending stepwise approach reduce model minimization AIC, may encounter error number rows changed.","code":""},{"path":"https://larmarange.github.io/guideR/reference/step_with_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply step(), taking into account missing values — step_with_na","text":"","code":"step_with_na(model, ...)  # Default S3 method step_with_na(model, ..., full_data = eval(model$call$data))  # S3 method for class 'svyglm' step_with_na(model, ..., design)"},{"path":"https://larmarange.github.io/guideR/reference/step_with_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply step(), taking into account missing values — step_with_na","text":"model model object. ... Additional parameters passed stats::step(). full_data Full data frame used model, including missing data. design Survey design previously passed survey::svyglm().","code":""},{"path":"https://larmarange.github.io/guideR/reference/step_with_na.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply step(), taking into account missing values — step_with_na","text":"step_with_na() applies following strategy: recomputes models using complete cases; applies stats::step(); recomputes reduced model using full original dataset. step_with_na() tested stats::lm(), stats::glm(), nnet::multinom() survey::svyglm(). may working types models, warranty. cases, may necessary provide full dataset initially used estimate model. step_with_na() may work inside functions. case, may try pass full_data function.","code":""},{"path":"https://larmarange.github.io/guideR/reference/step_with_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply step(), taking into account missing values — step_with_na","text":"","code":"set.seed(42) d <- titanic |>   dplyr::mutate(     Group = sample(       c(\"a\", \"b\", NA),       dplyr::n(),       replace = TRUE     )   ) mod <- glm(as.factor(Survived) ~ ., data = d, family = binomial()) # step(mod) should produce an error mod2 <- step_with_na(mod) #> Error in eval(model$call$data): object 'd' not found mod2 #> Error: object 'mod2' not found  if (FALSE) { # \\dontrun{ ## WITH SURVEY ---------------------------------------  ds <- d |>   dplyr::mutate(Survived = as.factor(Survived)) |>   srvyr::as_survey() mods <- survey::svyglm(   Survived ~ Class + Group + Sex,   design = ds,   family = quasibinomial() ) mod2s <- step_with_na(mods, design = ds) mod2s } # }"},{"path":"https://larmarange.github.io/guideR/reference/titanic.html","id":null,"dir":"Reference","previous_headings":"","what":"Titanic data set in long format — titanic","title":"Titanic data set in long format — titanic","text":"titanic dataset equivalent datasets::Titanic |> dplyr::as_tibble() |> tidyr::uncount(n).","code":""},{"path":"https://larmarange.github.io/guideR/reference/titanic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Titanic data set in long format — titanic","text":"","code":"titanic"},{"path":"https://larmarange.github.io/guideR/reference/titanic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Titanic data set in long format — titanic","text":"object class tbl_df (inherits tbl, data.frame) 2201 rows 4 columns.","code":""},{"path":[]},{"path":"https://larmarange.github.io/guideR/reference/unrowwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove row-wise grouping — unrowwise","title":"Remove row-wise grouping — unrowwise","text":"Remove row-wise grouping created dplyr::rowwise() preserving grouping declared dplyr::group_by().","code":""},{"path":"https://larmarange.github.io/guideR/reference/unrowwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove row-wise grouping — unrowwise","text":"","code":"unrowwise(data)"},{"path":"https://larmarange.github.io/guideR/reference/unrowwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove row-wise grouping — unrowwise","text":"data data frame, data frame extension (e.g. tibble), lazy data frame.","code":""},{"path":"https://larmarange.github.io/guideR/reference/unrowwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove row-wise grouping — unrowwise","text":"","code":"titanic |> dplyr::rowwise() #> # A tibble: 2,201 × 4 #> # Rowwise:  #>    Class Sex   Age   Survived #>    <chr> <chr> <chr> <chr>    #>  1 3rd   Male  Child No       #>  2 3rd   Male  Child No       #>  3 3rd   Male  Child No       #>  4 3rd   Male  Child No       #>  5 3rd   Male  Child No       #>  6 3rd   Male  Child No       #>  7 3rd   Male  Child No       #>  8 3rd   Male  Child No       #>  9 3rd   Male  Child No       #> 10 3rd   Male  Child No       #> # ℹ 2,191 more rows titanic |> dplyr::rowwise() |> unrowwise() #> # A tibble: 2,201 × 4 #>    Class Sex   Age   Survived #>    <chr> <chr> <chr> <chr>    #>  1 3rd   Male  Child No       #>  2 3rd   Male  Child No       #>  3 3rd   Male  Child No       #>  4 3rd   Male  Child No       #>  5 3rd   Male  Child No       #>  6 3rd   Male  Child No       #>  7 3rd   Male  Child No       #>  8 3rd   Male  Child No       #>  9 3rd   Male  Child No       #> 10 3rd   Male  Child No       #> # ℹ 2,191 more rows  titanic |> dplyr::group_by(Sex, Class) |> dplyr::rowwise() #> # A tibble: 2,201 × 4 #> # Rowwise:  Sex, Class #>    Class Sex   Age   Survived #>    <chr> <chr> <chr> <chr>    #>  1 3rd   Male  Child No       #>  2 3rd   Male  Child No       #>  3 3rd   Male  Child No       #>  4 3rd   Male  Child No       #>  5 3rd   Male  Child No       #>  6 3rd   Male  Child No       #>  7 3rd   Male  Child No       #>  8 3rd   Male  Child No       #>  9 3rd   Male  Child No       #> 10 3rd   Male  Child No       #> # ℹ 2,191 more rows titanic |> dplyr::group_by(Sex, Class) |> dplyr::rowwise() |> unrowwise() #> # A tibble: 2,201 × 4 #> # Groups:   Sex, Class [8] #>    Class Sex   Age   Survived #>    <chr> <chr> <chr> <chr>    #>  1 3rd   Male  Child No       #>  2 3rd   Male  Child No       #>  3 3rd   Male  Child No       #>  4 3rd   Male  Child No       #>  5 3rd   Male  Child No       #>  6 3rd   Male  Child No       #>  7 3rd   Male  Child No       #>  8 3rd   Male  Child No       #>  9 3rd   Male  Child No       #> 10 3rd   Male  Child No       #> # ℹ 2,191 more rows"},{"path":"https://larmarange.github.io/guideR/news/index.html","id":"guider-001","dir":"Changelog","previous_headings":"","what":"guideR 0.0.1","title":"guideR 0.0.1","text":"Initial CRAN submission.","code":""}]
