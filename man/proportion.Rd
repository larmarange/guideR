% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/proportion.R
\name{proportion}
\alias{proportion}
\alias{proportion.data.frame}
\title{Compute proportions}
\usage{
proportion(.data, ..., .by = NULL)

\method{proportion}{data.frame}(
  .data,
  ...,
  .by = NULL,
  .weight = NULL,
  .scale = 100,
  .sort = FALSE,
  .drop = FALSE,
  .conf.int = FALSE,
  .conf.level = 0.95,
  .correct = TRUE
)
}
\arguments{
\item{.data}{A data frame, data frame extension (e.g. a tibble),
or a survey design object.}

\item{...}{<\code{\link[rlang:args_data_masking]{data-masking}}> Variable(s) for those
computing proportions.}

\item{.by}{<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> Optional additional
variables to group by (in addition to those eventually previously declared
using \code{\link[dplyr:group_by]{dplyr::group_by()}}).}

\item{.weight}{<\code{\link[rlang:args_data_masking]{data-masking}}> Frequency
weights. Can be \code{NULL} or a variable.}

\item{.scale}{A scaling factor applied to proportion. Use \code{1} for keeping
proportions unchanged.}

\item{.sort}{If \code{TRUE}, will show the highest proportions at the top.}

\item{.drop}{If \code{TRUE}, will remove empty groups from the output.}

\item{.conf.int}{If \code{TRUE}, will estimate confidence intervals with
\code{\link[stats:prop.test]{stats::prop.test()}}.}

\item{.conf.level}{Confidence level for the returned confidence intervals.}

\item{.correct}{Whether Yates' continuity correction should be applied to
estimate confidence intervals (see \code{\link[stats:prop.test]{stats::prop.test()}}).}
}
\value{
A tibble with one row per group.
}
\description{
\code{proportion()} lets you quickly count observations (like \code{\link[dplyr:count]{dplyr::count()}})
and compute relative proportions. Proportions are computed separately by
group (see examples).
}
\examples{
titanic <- Titanic |> dplyr::as_tibble() |> tidyr::uncount(n)

# univariable table
titanic |> proportion(Class)
titanic |> proportion(Class, .sort = TRUE)
titanic |> proportion(Class, .conf.int = TRUE)
titanic |> proportion(Class, .conf.int = TRUE, .scale = 1)

# bivariable table
titanic |> proportion(Class, Survived) # proportions of the total
titanic |> proportion(Survived, .by = Class) # row proportions
titanic |> # equivalent syntax
  dplyr::group_by(Class) |>
  proportion(Survived)

# combining 3 variables or more
titanic |> proportion(Class, Sex, Survived)
titanic |> proportion(Sex, Survived, .by = Class)
titanic |> proportion(Survived, .by = c(Class, Sex))
}
